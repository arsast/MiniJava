Terminals unused in grammar

   ENDIF
   PROBEL


Grammar

    0 $accept: program $end

    1 program: list_stmt

    2 list_stmt: list_stmt stmt separator
    3          | /* empty */

    4 list_expr: list_expr expr gap
    5          | /* empty */

    6 gap: ','
    7    | gap ','
    8    | ':'

    9 separator: '\n'
   10          | separator '\n'

   11 var: PROGRAM IDENT ';' separator VAR list_expr INTEGER ';' separator BEGIN

   12 stmt: PRINT expr
   13     | var
   14     | RETURN '(' expr ')'
   15     | RETURN
   16     | IDENT ':' EQ expr ';'
   17     | IF log_expr THEN separator stmt ';'
   18     | IF log_expr THEN separator stmt separator ELSE separator stmt
   19     | IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN separator BEGIN separator list_stmt END ';'
   21     | WHILE log_expr DO separator BEGIN separator list_stmt END
   22     | WHILE log_expr DO separator stmt
   23     | FOR IDENT EQ expr TO expr DO separator BEGIN separator list_stmt END
   24     | FOR IDENT EQ expr TO expr DO separator stmt
   25     | READLN '(' IDENT ')'
   26     | WRITELN '(' expr ')'
   27     | WRITE '(' expr ')'

   28 log_expr: expr '<' expr
   29         | expr '>' expr
   30         | expr EQ expr
   31         | expr NR expr

   32 expr: IDENT
   33     | NUMERAL
   34     | '-' expr
   35     | expr '+' expr
   36     | expr '-' expr
   37     | expr '*' expr
   38     | expr '/' expr
   39     | expr POW expr
   40     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 9 10
'(' (40) 14 25 26 27 40
')' (41) 14 25 26 27 40
'*' (42) 37
'+' (43) 35
',' (44) 6 7
'-' (45) 34 36
'/' (47) 38
':' (58) 8 16
';' (59) 11 16 17 20
'<' (60) 28
'>' (62) 29
error (256)
POW (258) 39
UMINUS (259)
NUMERAL (260) 33
IDENT (261) 11 16 23 24 25 32
PRINT (262) 12
IF (263) 17 18 19 20
THEN (264) 17 18 19 20
ELSE (265) 18 19
ENDIF (266)
EQ (267) 16 23 24 30
NR (268) 31
WHILE (269) 21 22
DO (270) 21 22 23 24
BEGIN (271) 11 19 20 21 23
END (272) 19 20 21 23
FOR (273) 23 24
TO (274) 23 24
VAR (275) 11
READLN (276) 25
WRITELN (277) 26
WRITE (278) 27
RETURN (279) 14 15
INTEGER (280) 11
PROBEL (281)
PROGRAM (282) 11


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0
list_stmt (42)
    on left: 2 3, on right: 1 2 19 20 21 23
list_expr (43)
    on left: 4 5, on right: 4 11
gap (44)
    on left: 6 7 8, on right: 4 7
separator (45)
    on left: 9 10, on right: 2 10 11 17 18 19 20 21 22 23 24
var (46)
    on left: 11, on right: 13
stmt (47)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27, on right:
    2 17 18 22 24
log_expr (48)
    on left: 28 29 30 31, on right: 17 18 19 20 21 22
expr (49)
    on left: 32 33 34 35 36 37 38 39 40, on right: 4 12 14 16 23 24
    26 27 28 29 30 31 34 35 36 37 38 39 40


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (list_stmt)

    program    go to state 1
    list_stmt  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: list_stmt .
    2 list_stmt: list_stmt . stmt separator

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13

    $default  reduce using rule 1 (program)

    var   go to state 14
    stmt  go to state 15


State 3

    0 $accept: program $end .

    $default  accept


State 4

   16 stmt: IDENT . ':' EQ expr ';'

    ':'  shift, and go to state 16


State 5

   12 stmt: PRINT . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 21


State 6

   17 stmt: IF . log_expr THEN separator stmt ';'
   18     | IF . log_expr THEN separator stmt separator ELSE separator stmt
   19     | IF . log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF . log_expr THEN separator BEGIN separator list_stmt END ';'

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    log_expr  go to state 22
    expr      go to state 23


State 7

   21 stmt: WHILE . log_expr DO separator BEGIN separator list_stmt END
   22     | WHILE . log_expr DO separator stmt

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    log_expr  go to state 24
    expr      go to state 23


State 8

   23 stmt: FOR . IDENT EQ expr TO expr DO separator BEGIN separator list_stmt END
   24     | FOR . IDENT EQ expr TO expr DO separator stmt

    IDENT  shift, and go to state 25


State 9

   25 stmt: READLN . '(' IDENT ')'

    '('  shift, and go to state 26


State 10

   26 stmt: WRITELN . '(' expr ')'

    '('  shift, and go to state 27


State 11

   27 stmt: WRITE . '(' expr ')'

    '('  shift, and go to state 28


State 12

   14 stmt: RETURN . '(' expr ')'
   15     | RETURN .

    '('  shift, and go to state 29

    $default  reduce using rule 15 (stmt)


State 13

   11 var: PROGRAM . IDENT ';' separator VAR list_expr INTEGER ';' separator BEGIN

    IDENT  shift, and go to state 30


State 14

   13 stmt: var .

    $default  reduce using rule 13 (stmt)


State 15

    2 list_stmt: list_stmt stmt . separator

    '\n'  shift, and go to state 31

    separator  go to state 32


State 16

   16 stmt: IDENT ':' . EQ expr ';'

    EQ  shift, and go to state 33


State 17

   34 expr: '-' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 34


State 18

   33 expr: NUMERAL .

    $default  reduce using rule 33 (expr)


State 19

   32 expr: IDENT .

    $default  reduce using rule 32 (expr)


State 20

   40 expr: '(' . expr ')'

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 35


State 21

   12 stmt: PRINT expr .
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 12 (stmt)


State 22

   17 stmt: IF log_expr . THEN separator stmt ';'
   18     | IF log_expr . THEN separator stmt separator ELSE separator stmt
   19     | IF log_expr . THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr . THEN separator BEGIN separator list_stmt END ';'

    THEN  shift, and go to state 41


State 23

   28 log_expr: expr . '<' expr
   29         | expr . '>' expr
   30         | expr . EQ expr
   31         | expr . NR expr
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    EQ   shift, and go to state 42
    NR   shift, and go to state 43
    '<'  shift, and go to state 44
    '>'  shift, and go to state 45


State 24

   21 stmt: WHILE log_expr . DO separator BEGIN separator list_stmt END
   22     | WHILE log_expr . DO separator stmt

    DO  shift, and go to state 46


State 25

   23 stmt: FOR IDENT . EQ expr TO expr DO separator BEGIN separator list_stmt END
   24     | FOR IDENT . EQ expr TO expr DO separator stmt

    EQ  shift, and go to state 47


State 26

   25 stmt: READLN '(' . IDENT ')'

    IDENT  shift, and go to state 48


State 27

   26 stmt: WRITELN '(' . expr ')'

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 49


State 28

   27 stmt: WRITE '(' . expr ')'

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 50


State 29

   14 stmt: RETURN '(' . expr ')'

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 51


State 30

   11 var: PROGRAM IDENT . ';' separator VAR list_expr INTEGER ';' separator BEGIN

    ';'  shift, and go to state 52


State 31

    9 separator: '\n' .

    $default  reduce using rule 9 (separator)


State 32

    2 list_stmt: list_stmt stmt separator .
   10 separator: separator . '\n'

    '\n'  shift, and go to state 53

    $default  reduce using rule 2 (list_stmt)


State 33

   16 stmt: IDENT ':' EQ . expr ';'

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 54


State 34

   34 expr: '-' expr .
   35     | expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    $default  reduce using rule 34 (expr)


State 35

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr
   40     | '(' expr . ')'

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    ')'  shift, and go to state 55


State 36

   35 expr: expr '+' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 56


State 37

   36 expr: expr '-' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 57


State 38

   37 expr: expr '*' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 58


State 39

   38 expr: expr '/' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 59


State 40

   39 expr: expr POW . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 60


State 41

   17 stmt: IF log_expr THEN . separator stmt ';'
   18     | IF log_expr THEN . separator stmt separator ELSE separator stmt
   19     | IF log_expr THEN . separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN . separator BEGIN separator list_stmt END ';'

    '\n'  shift, and go to state 31

    separator  go to state 61


State 42

   30 log_expr: expr EQ . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 62


State 43

   31 log_expr: expr NR . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 63


State 44

   28 log_expr: expr '<' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 64


State 45

   29 log_expr: expr '>' . expr

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 65


State 46

   21 stmt: WHILE log_expr DO . separator BEGIN separator list_stmt END
   22     | WHILE log_expr DO . separator stmt

    '\n'  shift, and go to state 31

    separator  go to state 66


State 47

   23 stmt: FOR IDENT EQ . expr TO expr DO separator BEGIN separator list_stmt END
   24     | FOR IDENT EQ . expr TO expr DO separator stmt

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 67


State 48

   25 stmt: READLN '(' IDENT . ')'

    ')'  shift, and go to state 68


State 49

   26 stmt: WRITELN '(' expr . ')'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    ')'  shift, and go to state 69


State 50

   27 stmt: WRITE '(' expr . ')'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    ')'  shift, and go to state 70


State 51

   14 stmt: RETURN '(' expr . ')'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    ')'  shift, and go to state 71


State 52

   11 var: PROGRAM IDENT ';' . separator VAR list_expr INTEGER ';' separator BEGIN

    '\n'  shift, and go to state 31

    separator  go to state 72


State 53

   10 separator: separator '\n' .

    $default  reduce using rule 10 (separator)


State 54

   16 stmt: IDENT ':' EQ expr . ';'
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    ';'  shift, and go to state 73


State 55

   40 expr: '(' expr ')' .

    $default  reduce using rule 40 (expr)


State 56

   35 expr: expr . '+' expr
   35     | expr '+' expr .
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 35 (expr)


State 57

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   36     | expr '-' expr .
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 36 (expr)


State 58

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   37     | expr '*' expr .
   38     | expr . '/' expr
   39     | expr . POW expr

    POW  shift, and go to state 40

    $default  reduce using rule 37 (expr)


State 59

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   38     | expr '/' expr .
   39     | expr . POW expr

    POW  shift, and go to state 40

    $default  reduce using rule 38 (expr)


State 60

   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr
   39     | expr POW expr .

    POW  shift, and go to state 40

    $default  reduce using rule 39 (expr)


State 61

   10 separator: separator . '\n'
   17 stmt: IF log_expr THEN separator . stmt ';'
   18     | IF log_expr THEN separator . stmt separator ELSE separator stmt
   19     | IF log_expr THEN separator . BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN separator . BEGIN separator list_stmt END ';'

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    BEGIN    shift, and go to state 74
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13
    '\n'     shift, and go to state 53

    var   go to state 14
    stmt  go to state 75


State 62

   30 log_expr: expr EQ expr .
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 30 (log_expr)


State 63

   31 log_expr: expr NR expr .
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 31 (log_expr)


State 64

   28 log_expr: expr '<' expr .
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 28 (log_expr)


State 65

   29 log_expr: expr '>' expr .
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40

    $default  reduce using rule 29 (log_expr)


State 66

   10 separator: separator . '\n'
   21 stmt: WHILE log_expr DO separator . BEGIN separator list_stmt END
   22     | WHILE log_expr DO separator . stmt

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    BEGIN    shift, and go to state 76
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13
    '\n'     shift, and go to state 53

    var   go to state 14
    stmt  go to state 77


State 67

   23 stmt: FOR IDENT EQ expr . TO expr DO separator BEGIN separator list_stmt END
   24     | FOR IDENT EQ expr . TO expr DO separator stmt
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    TO   shift, and go to state 78


State 68

   25 stmt: READLN '(' IDENT ')' .

    $default  reduce using rule 25 (stmt)


State 69

   26 stmt: WRITELN '(' expr ')' .

    $default  reduce using rule 26 (stmt)


State 70

   27 stmt: WRITE '(' expr ')' .

    $default  reduce using rule 27 (stmt)


State 71

   14 stmt: RETURN '(' expr ')' .

    $default  reduce using rule 14 (stmt)


State 72

   10 separator: separator . '\n'
   11 var: PROGRAM IDENT ';' separator . VAR list_expr INTEGER ';' separator BEGIN

    VAR   shift, and go to state 79
    '\n'  shift, and go to state 53


State 73

   16 stmt: IDENT ':' EQ expr ';' .

    $default  reduce using rule 16 (stmt)


State 74

   19 stmt: IF log_expr THEN separator BEGIN . separator list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN separator BEGIN . separator list_stmt END ';'

    '\n'  shift, and go to state 31

    separator  go to state 80


State 75

   17 stmt: IF log_expr THEN separator stmt . ';'
   18     | IF log_expr THEN separator stmt . separator ELSE separator stmt

    '\n'  shift, and go to state 31
    ';'   shift, and go to state 81

    separator  go to state 82


State 76

   21 stmt: WHILE log_expr DO separator BEGIN . separator list_stmt END

    '\n'  shift, and go to state 31

    separator  go to state 83


State 77

   22 stmt: WHILE log_expr DO separator stmt .

    $default  reduce using rule 22 (stmt)


State 78

   23 stmt: FOR IDENT EQ expr TO . expr DO separator BEGIN separator list_stmt END
   24     | FOR IDENT EQ expr TO . expr DO separator stmt

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    '('      shift, and go to state 20

    expr  go to state 84


State 79

   11 var: PROGRAM IDENT ';' separator VAR . list_expr INTEGER ';' separator BEGIN

    $default  reduce using rule 5 (list_expr)

    list_expr  go to state 85


State 80

   10 separator: separator . '\n'
   19 stmt: IF log_expr THEN separator BEGIN separator . list_stmt END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN separator BEGIN separator . list_stmt END ';'

    '\n'  shift, and go to state 53

    $default  reduce using rule 3 (list_stmt)

    list_stmt  go to state 86


State 81

   17 stmt: IF log_expr THEN separator stmt ';' .

    $default  reduce using rule 17 (stmt)


State 82

   10 separator: separator . '\n'
   18 stmt: IF log_expr THEN separator stmt separator . ELSE separator stmt

    ELSE  shift, and go to state 87
    '\n'  shift, and go to state 53


State 83

   10 separator: separator . '\n'
   21 stmt: WHILE log_expr DO separator BEGIN separator . list_stmt END

    '\n'  shift, and go to state 53

    $default  reduce using rule 3 (list_stmt)

    list_stmt  go to state 88


State 84

   23 stmt: FOR IDENT EQ expr TO expr . DO separator BEGIN separator list_stmt END
   24     | FOR IDENT EQ expr TO expr . DO separator stmt
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    DO   shift, and go to state 89


State 85

    4 list_expr: list_expr . expr gap
   11 var: PROGRAM IDENT ';' separator VAR list_expr . INTEGER ';' separator BEGIN

    '-'      shift, and go to state 17
    NUMERAL  shift, and go to state 18
    IDENT    shift, and go to state 19
    INTEGER  shift, and go to state 90
    '('      shift, and go to state 20

    expr  go to state 91


State 86

    2 list_stmt: list_stmt . stmt separator
   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt . END separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN separator BEGIN separator list_stmt . END ';'

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    END      shift, and go to state 92
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13

    var   go to state 14
    stmt  go to state 15


State 87

   18 stmt: IF log_expr THEN separator stmt separator ELSE . separator stmt

    '\n'  shift, and go to state 31

    separator  go to state 93


State 88

    2 list_stmt: list_stmt . stmt separator
   21 stmt: WHILE log_expr DO separator BEGIN separator list_stmt . END

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    END      shift, and go to state 94
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13

    var   go to state 14
    stmt  go to state 15


State 89

   23 stmt: FOR IDENT EQ expr TO expr DO . separator BEGIN separator list_stmt END
   24     | FOR IDENT EQ expr TO expr DO . separator stmt

    '\n'  shift, and go to state 31

    separator  go to state 95


State 90

   11 var: PROGRAM IDENT ';' separator VAR list_expr INTEGER . ';' separator BEGIN

    ';'  shift, and go to state 96


State 91

    4 list_expr: list_expr expr . gap
   35 expr: expr . '+' expr
   36     | expr . '-' expr
   37     | expr . '*' expr
   38     | expr . '/' expr
   39     | expr . POW expr

    '+'  shift, and go to state 36
    '-'  shift, and go to state 37
    '*'  shift, and go to state 38
    '/'  shift, and go to state 39
    POW  shift, and go to state 40
    ','  shift, and go to state 97
    ':'  shift, and go to state 98

    gap  go to state 99


State 92

   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END . separator ELSE separator BEGIN separator list_stmt END
   20     | IF log_expr THEN separator BEGIN separator list_stmt END . ';'

    '\n'  shift, and go to state 31
    ';'   shift, and go to state 100

    separator  go to state 101


State 93

   10 separator: separator . '\n'
   18 stmt: IF log_expr THEN separator stmt separator ELSE separator . stmt

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13
    '\n'     shift, and go to state 53

    var   go to state 14
    stmt  go to state 102


State 94

   21 stmt: WHILE log_expr DO separator BEGIN separator list_stmt END .

    $default  reduce using rule 21 (stmt)


State 95

   10 separator: separator . '\n'
   23 stmt: FOR IDENT EQ expr TO expr DO separator . BEGIN separator list_stmt END
   24     | FOR IDENT EQ expr TO expr DO separator . stmt

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    BEGIN    shift, and go to state 103
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13
    '\n'     shift, and go to state 53

    var   go to state 14
    stmt  go to state 104


State 96

   11 var: PROGRAM IDENT ';' separator VAR list_expr INTEGER ';' . separator BEGIN

    '\n'  shift, and go to state 31

    separator  go to state 105


State 97

    6 gap: ',' .

    $default  reduce using rule 6 (gap)


State 98

    8 gap: ':' .

    $default  reduce using rule 8 (gap)


State 99

    4 list_expr: list_expr expr gap .
    7 gap: gap . ','

    ','  shift, and go to state 106

    $default  reduce using rule 4 (list_expr)


State 100

   20 stmt: IF log_expr THEN separator BEGIN separator list_stmt END ';' .

    $default  reduce using rule 20 (stmt)


State 101

   10 separator: separator . '\n'
   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator . ELSE separator BEGIN separator list_stmt END

    ELSE  shift, and go to state 107
    '\n'  shift, and go to state 53


State 102

   18 stmt: IF log_expr THEN separator stmt separator ELSE separator stmt .

    $default  reduce using rule 18 (stmt)


State 103

   23 stmt: FOR IDENT EQ expr TO expr DO separator BEGIN . separator list_stmt END

    '\n'  shift, and go to state 31

    separator  go to state 108


State 104

   24 stmt: FOR IDENT EQ expr TO expr DO separator stmt .

    $default  reduce using rule 24 (stmt)


State 105

   10 separator: separator . '\n'
   11 var: PROGRAM IDENT ';' separator VAR list_expr INTEGER ';' separator . BEGIN

    BEGIN  shift, and go to state 109
    '\n'   shift, and go to state 53


State 106

    7 gap: gap ',' .

    $default  reduce using rule 7 (gap)


State 107

   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE . separator BEGIN separator list_stmt END

    '\n'  shift, and go to state 31

    separator  go to state 110


State 108

   10 separator: separator . '\n'
   23 stmt: FOR IDENT EQ expr TO expr DO separator BEGIN separator . list_stmt END

    '\n'  shift, and go to state 53

    $default  reduce using rule 3 (list_stmt)

    list_stmt  go to state 111


State 109

   11 var: PROGRAM IDENT ';' separator VAR list_expr INTEGER ';' separator BEGIN .

    $default  reduce using rule 11 (var)


State 110

   10 separator: separator . '\n'
   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator . BEGIN separator list_stmt END

    BEGIN  shift, and go to state 112
    '\n'   shift, and go to state 53


State 111

    2 list_stmt: list_stmt . stmt separator
   23 stmt: FOR IDENT EQ expr TO expr DO separator BEGIN separator list_stmt . END

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    END      shift, and go to state 113
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13

    var   go to state 14
    stmt  go to state 15


State 112

   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN . separator list_stmt END

    '\n'  shift, and go to state 31

    separator  go to state 114


State 113

   23 stmt: FOR IDENT EQ expr TO expr DO separator BEGIN separator list_stmt END .

    $default  reduce using rule 23 (stmt)


State 114

   10 separator: separator . '\n'
   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator . list_stmt END

    '\n'  shift, and go to state 53

    $default  reduce using rule 3 (list_stmt)

    list_stmt  go to state 115


State 115

    2 list_stmt: list_stmt . stmt separator
   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt . END

    IDENT    shift, and go to state 4
    PRINT    shift, and go to state 5
    IF       shift, and go to state 6
    WHILE    shift, and go to state 7
    END      shift, and go to state 116
    FOR      shift, and go to state 8
    READLN   shift, and go to state 9
    WRITELN  shift, and go to state 10
    WRITE    shift, and go to state 11
    RETURN   shift, and go to state 12
    PROGRAM  shift, and go to state 13

    var   go to state 14
    stmt  go to state 15


State 116

   19 stmt: IF log_expr THEN separator BEGIN separator list_stmt END separator ELSE separator BEGIN separator list_stmt END .

    $default  reduce using rule 19 (stmt)
