Processing file: C:\Users\Acer\Documents\Visual Studio 2012\Projects\MiniJava\MyMiniJava\samples\treevisitor.java
class TreeVisitor { 
   public static Void main ( String [] a ) { 
       System.out.println ( new TV (). Start (  ) ) ;
   }
}

class TV { 
    public int Start ( ) { 
        MyVisitor v ;
        int nti ;
        bool ntb ;
        Tree root ;
        root = new Tree ();
        ntb =  root . Init ( 16  );
        ntb =  root . Print (  );
        System.out.println ( 100000000 ) ;
        ntb =  root . Insert ( 8  );
        ntb =  root . Insert ( 24  );
        ntb =  root . Insert ( 4  );
        ntb =  root . Insert ( 12  );
        ntb =  root . Insert ( 20  );
        ntb =  root . Insert ( 28  );
        ntb =  root . Insert ( 14  );
        ntb =  root . Print (  );
        System.out.println ( 100000000 ) ;
        v = new MyVisitor ();
        System.out.println ( 50000000 ) ;
        nti =  root . accept (  v   );
        System.out.println ( 100000000 ) ;
        System.out.println (  root . Search ( 24  ) ) ;
        System.out.println (  root . Search ( 12  ) ) ;
        System.out.println (  root . Search ( 16  ) ) ;
        System.out.println (  root . Search ( 50  ) ) ;
        System.out.println (  root . Search ( 12  ) ) ;
        ntb =  root . Delete ( 12  );
        ntb =  root . Print (  );
        System.out.println (  root . Search ( 12  ) ) ;

        return 0;
    }

}

class Tree { 
    Tree my_null ;
    bool has_right ;
    bool has_left ;
    int key ;
    Tree right ;
    Tree left ;
    public int accept ( Visitor v ) { 
        int nti ;
        System.out.println ( 333 ) ;
        nti =  v . visit ( this  );

        return 0;
    }
    public bool RecPrint ( Tree node ) { 
        bool ntb ;
        if (  node . GetHas_Left (  ) )
            {
                ntb = this. RecPrint (  node . GetLeft (  )  );
            }
        else
            ntb = true;
        System.out.println (  node . GetKey (  ) ) ;
        if (  node . GetHas_Right (  ) )
            {
                ntb = this. RecPrint (  node . GetRight (  )  );
            }
        else
            ntb = true;

        return true;
    }
    public bool Print ( ) { 
        Tree current_node ;
        bool ntb ;
        current_node = this;
        ntb = this. RecPrint (  current_node   );

        return true;
    }
    public int Search ( int v_key ) { 
        int key_aux ;
        bool cont ;
        int ifound ;
        Tree current_node ;
        current_node = this;
        cont = true;
        ifound = 0;
        while (  cont  )
            {
                key_aux =  current_node . GetKey (  );
                if (  v_key  <  key_aux  )
                    if (  current_node . GetHas_Left (  ) )
                        current_node =  current_node . GetLeft (  );
                    else
                        cont = false;
                else
                    if (  key_aux  <  v_key  )
                        if (  current_node . GetHas_Right (  ) )
                            current_node =  current_node . GetRight (  );
                        else
                            cont = false;
                    else
                        {
                            ifound = 1;
                            cont = false;
                        }
        }

    return  ifound ;
}
public bool RemoveLeft ( Tree p_node , Tree c_node ) { 
    bool ntb ;
    while (  c_node . GetHas_Left (  ) )
        {
            ntb =  c_node . SetKey ( (  c_node . GetLeft (  ) ). GetKey (  )  );
            p_node =  c_node ;
            c_node =  c_node . GetLeft (  );
        }
    ntb =  p_node . SetLeft (  my_null   );
    ntb =  p_node . SetHas_Left ( false  );

    return true;
}
public bool RemoveRight ( Tree p_node , Tree c_node ) { 
    bool ntb ;
    while (  c_node . GetHas_Right (  ) )
        {
            ntb =  c_node . SetKey ( (  c_node . GetRight (  ) ). GetKey (  )  );
            p_node =  c_node ;
            c_node =  c_node . GetRight (  );
        }
    ntb =  p_node . SetRight (  my_null   );
    ntb =  p_node . SetHas_Right ( false  );

    return true;
}
public bool Remove ( Tree p_node , Tree c_node ) { 
    int auxkey2 ;
    int auxkey1 ;
    bool ntb ;
    if (  c_node . GetHas_Left (  ) )
        ntb = this. RemoveLeft (  p_node  ,  c_node   );
    else
        if (  c_node . GetHas_Right (  ) )
            ntb = this. RemoveRight (  p_node  ,  c_node   );
        else
            {
                auxkey1 =  c_node . GetKey (  );
                auxkey2 = (  p_node . GetLeft (  ) ). GetKey (  );
                if ( this. Compare (  auxkey1  ,  auxkey2   ) )
                    {
                        ntb =  p_node . SetLeft (  my_null   );
                        ntb =  p_node . SetHas_Left ( false  );
                    }
                else
                    {
                        ntb =  p_node . SetRight (  my_null   );
                        ntb =  p_node . SetHas_Right ( false  );
                    }
        }

return true;
}
public bool Delete ( int v_key ) { 
    int key_aux ;
    bool is_root ;
    bool ntb ;
    bool found ;
    bool cont ;
    Tree parent_node ;
    Tree current_node ;
    current_node = this;
    parent_node = this;
    cont = true;
    found = false;
    is_root = true;
    while (  cont  )
        {
            key_aux =  current_node . GetKey (  );
            if (  v_key  <  key_aux  )
                if (  current_node . GetHas_Left (  ) )
                    {
                        parent_node =  current_node ;
                        current_node =  current_node . GetLeft (  );
                    }
                else
                    cont = false;
            else
                if (  key_aux  <  v_key  )
                    if (  current_node . GetHas_Right (  ) )
                        {
                            parent_node =  current_node ;
                            current_node =  current_node . GetRight (  );
                        }
                    else
                        cont = false;
                else
                    {
                        if (  is_root  )
                            if ( !  current_node . GetHas_Right (  ) && !  current_node . GetHas_Left (  ) )
                                ntb = true;
                            else
                                ntb = this. Remove (  parent_node  ,  current_node   );
                        else
                            ntb = this. Remove (  parent_node  ,  current_node   );
                        found = true;
                        cont = false;
                    }
        is_root = false;
    }

return  found ;
}
public bool Insert ( int v_key ) { 
    int key_aux ;
    bool cont ;
    Tree current_node ;
    bool ntb ;
    Tree new_node ;
    new_node = new Tree ();
    ntb =  new_node . Init (  v_key   );
    current_node = this;
    cont = true;
    while (  cont  )
        {
            key_aux =  current_node . GetKey (  );
            if (  v_key  <  key_aux  )
                {
                    if (  current_node . GetHas_Left (  ) )
                        current_node =  current_node . GetLeft (  );
                    else
                        {
                            cont = false;
                            ntb =  current_node . SetHas_Left ( true  );
                            ntb =  current_node . SetLeft (  new_node   );
                        }
            }
            else
                {
                    if (  current_node . GetHas_Right (  ) )
                        current_node =  current_node . GetRight (  );
                    else
                        {
                            cont = false;
                            ntb =  current_node . SetHas_Right ( true  );
                            ntb =  current_node . SetRight (  new_node   );
                        }
            }
}

return true;
}
public bool Compare ( int num1 , int num2 ) { 
    int nti ;
    bool ntb ;
    ntb = false;
    nti =  num2  + 1;
    if (  num1  <  num2  )
        ntb = false;
    else
        if ( ! (  num1  <  nti  ) )
            ntb = false;
        else
            ntb = true;

    return  ntb ;
}
public bool SetHas_Right ( bool val ) { 
    has_right =  val ;

    return true;
}
public bool SetHas_Left ( bool val ) { 
    has_left =  val ;

    return true;
}
public bool GetHas_Left ( ) { 

    return  has_left ;
}
public bool GetHas_Right ( ) { 

    return  has_right ;
}
public bool SetKey ( int v_key ) { 
    key =  v_key ;

    return true;
}
public int GetKey ( ) { 

    return  key ;
}
public Tree GetLeft ( ) { 

    return  left ;
}
public Tree GetRight ( ) { 

    return  right ;
}
public bool SetLeft ( Tree ln ) { 
    left =  ln ;

    return true;
}
public bool SetRight ( Tree rn ) { 
    right =  rn ;

    return true;
}
public bool Init ( int v_key ) { 
    key =  v_key ;
    has_left = false;
    has_right = false;

    return true;
}

}

class Visitor { 
    Tree r ;
    Tree l ;
    public int visit ( Tree n ) { 
        int nti ;
        if (  n . GetHas_Right (  ) )
            {
                r =  n . GetRight (  );
                nti =  r . accept ( this  );
            }
        else
            nti = 0;
        if (  n . GetHas_Left (  ) )
            {
                l =  n . GetLeft (  );
                nti =  l . accept ( this  );
            }
        else
            nti = 0;

        return 0;
    }

}

class MyVisitor extends Visitor { 
    public int visit ( Tree n ) { 
        int nti ;
        if (  n . GetHas_Right (  ) )
            {
                r =  n . GetRight (  );
                nti =  r . accept ( this  );
            }
        else
            nti = 0;
        System.out.println (  n . GetKey (  ) ) ;
        if (  n . GetHas_Left (  ) )
            {
                l =  n . GetLeft (  );
                nti =  l . accept ( this  );
            }
        else
            nti = 0;

        return 0;
    }

}
Error at 34:20: Unexpected type MyVisitor instead of Visitor
Error at 361:21: Unexpected type MyVisitor instead of Visitor
Error at 368:20: Unexpected type MyVisitor instead of Visitor
Processing file: C:\Users\Acer\Documents\Visual Studio 2012\Projects\MiniJava\MyMiniJava\samples\factorial.java
class Factorial { 
    public static Void main ( String [] a ) { 
        System.out.println ( new Fac (). ComputeFac ( 10  ) ) ;
    }
}

class Fac { 
    public int ComputeFac ( int num ) { 
        int num_aux ;
        if (  num  < 1 )
            num_aux = 1;
        else
            num_aux =  num  * ( this. ComputeFac (  num  - 1  ) );

        return  num_aux ;
    }

}
Symbol table size: 2
-------------------------------
Class name : Fac

Class methods: 

ComputeFac

Class variables: 

-------------------------------
Class name : Factorial

Class methods: 

main

Class variables: 

a
-------------------------------
-------------------------------
